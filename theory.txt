1
Многопоточность. Ключевые слова volatile, synchronized. Методы notify, notifyAll, wait.

Многопоточность используется для выполнения нескольких потоков, что значительно ускоряет работу программмы на многоядерных процессорах
Thread  эт основной класс для работы с потоками start() run() sleep()
Runnable интерфейс реализующий задачу для выполнения в отдельном потоке метод run()
volatile ключевое слово для возможности изменения переменной несколькими потоками одновременно

synchronized ключевое слово для предотвращения одновременного доступа нескольких потоков
public synchronized void method() {}

notify и notifyAll  методы используемые для уведомления потоков которые ждут на объекте, что условие изменилось и можно продолжить выполнение
первый для одного потока второй для всех

wait используется для того, чтобы поток ожидал уведомления от другого потока
synchronized (obj) {
    obj.wait();
    }

2
Основные методы для работы с коллекциями. Классы Collections, Arrays.

Collections  методы
sort(List<T> list, Comparator<T> ) cортирует указанный список с использованием указанного компаратора
binarySearch(List<? extends Comparable<? super T>> list, T key) выполняет двоичный поиск указанного ключа в указанном списке
shuffle(List<T> list) перемешивает элементы указанного списка в случайном порядк
min() max() также можно с компараторами
synchronizedList(List<T> list) возвращает синхронизированную  версию указанного списка
unmodifiableMap|Set|List  ыозвращает неизменяемую версию

 Arrays методы
 sort(T[] a, Comparator<? super T> c) Сортирует указанный массив объектов с использованием указанного компаратора
 binarySearch(int[] a, int key) Выполняет двоичный поиск указанного ключа в указанном массиве целых чисел
 fill(int[] a, int val) Заполняет указанный массив целых чисел указанным значением
 copyOf(int[] original, int newLength) Копирует указанный массив целых чисел, обрезая или дополняя его до указанной новой длины
 equals(int[] a, int[] a2) Возвращает true, если два указанных массива целых чисел равны
